#lang typed/racket


(define-type BinomialTree Node)

(struct (a) Node
  ([data : a]
   [rank : Integer]
   [tree-list : (Listof BinomialTree)]))

(: root (All (a) (-> BinomialTree a)))
(define (root node) (Node-data node))

(: rank (-> BinomialTree Integer))
(define (rank node) (Node-rank node))

(: link (-> BinomialTree BinomialTree BinomialTree))
(define (link other this)
  (if (<= (root this) (root other))
      (Node (root this) (+ (rank this) 1) (other . (Node-tree-list this)))
      (Node (root other) (+ (rank other) 1) (this . (Node-tree-list other)))))

(: ins (-> BinomialTree BinomialTree BinomialTree))
(define (ins data this)
  (if (empty? this)
      '(data)
      (if (rank 